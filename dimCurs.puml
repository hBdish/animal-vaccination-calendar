@startuml
class com.example.cursjavafx.classes.EventsAnimals {
~ int id
~ String name
~ Date date_start
~ Date date_end
+ int getId()
+ void setId(int)
+ String getName()
+ void setName(String)
+ Date getDate_start()
+ void setDate_start(Date)
+ Date getDate_end()
+ void setDate_end(Date)
}
class com.example.cursjavafx.AnimalController {
+ TableView<EventsAnimals> eventTable
+ TableColumn<EventsAnimals,Integer> id
+ TableColumn<EventsAnimals,String> name
+ TableColumn<EventsAnimals,Date> date_start
+ TableColumn<EventsAnimals,Date> date_end
+ Label idLable
+ TextField name_event
+ DatePicker date_start_event
+ DatePicker date_end_event
+ TableView<Pills> pillsTable
+ TableColumn<Pills,Integer> id_pills
+ TableColumn<Pills,String> name_pills
+ TableColumn<Pills,Integer> days_pills
+ ChoiceBox<String> prescribing
+ DatePicker date_start_pills
~ PostgreDB db
+ void initialize(URL,ResourceBundle)
+ void setTable(PostgreDB)
+ void addEvent(ActionEvent)
+ void deleteEvent(ActionEvent)
+ void switchToMain(ActionEvent)
+ void addPills(ActionEvent)
- LocalDate calcDateEnd(LocalDate,int)
}
enum com.example.cursjavafx.utils.Scenes {
+  LOGIN
+  MAIN
+  ADD_ANIMAL
+  ANIMAL_EVENTS
+  CALENDAR
+  REGISTRATION
- String title
+ String getTitle()
+ void switchScene(ActionEvent)
}
class com.example.cursjavafx.classes.CalendarActivity {
- ZonedDateTime date
- String event_name
- String clientName
- Boolean eventInfo
+ ZonedDateTime getDate()
+ void setDate(ZonedDateTime)
+ String getClientName()
+ void setClientName(String)
+ String getEvent_name()
+ void setEvent_name(String)
+ Boolean getEventInfo()
+ void setEventInfo(Boolean)
+ String toString()
}
class com.example.cursjavafx.classes.Animal {
~ int id
~ String name
~ String kind
~ Date date_birth
+ int getId()
+ void setId(int)
+ String getName()
+ void setName(String)
+ String getKind()
+ void setKind(String)
+ Date getDate_birth()
+ void setDate_birth(Date)
+ String toString()
}
class com.example.cursjavafx.RegistrationController {
+ TextField name
+ TextField login
+ TextField password
~ PostgreDB db
~ String regexPassword
~ String regexLogin
+ void onMainButtonClick(ActionEvent)
+ void switchToLoginPage(ActionEvent)
}
class com.example.cursjavafx.MainController {
+ TableView<Animal> animalTable
+ TableColumn<Animal,Integer> animalId
+ TableColumn<Animal,String> animalName
+ TableColumn<Animal,String> animalKind
+ TableColumn<Animal,Date> animalDateB
- ObservableList<Animal> data
~ PostgreDB db
+ void initialize(URL,ResourceBundle)
+ void openAddAnimal(ActionEvent)
+ void delete(ActionEvent)
+ void openAnimal(ActionEvent)
+ void openCalendar(ActionEvent)
}
class com.example.cursjavafx.HelloApplication {
+ {static} int idUser
+ {static} int idAnimal
+ {static} String nameAnimal
+ {static} String kindAnimal
+ {static} String prescribing
+ void start(Stage)
+ {static} void main(String[])
}
class com.example.cursjavafx.classes.Pills {
~ int id
~ String name
~ int days
+ int getId()
+ void setId(int)
+ String getName()
+ void setName(String)
+ int getDays()
+ void setDays(int)
+ String toString()
}
class com.example.cursjavafx.SceneController {
- Stage stage
- Scene scene
- Parent root
+ void switchScene(ActionEvent,String)
}
class com.example.cursjavafx.AddAnimalController {
+ ChoiceBox<String> choiceKindList
+ TextField name
+ DatePicker date
+ CheckBox idReglament
~ PostgreDB db
+ void initialize(URL,ResourceBundle)
+ void addAnimal(ActionEvent)
+ void backOnMain(ActionEvent)
}
class com.example.cursjavafx.database.PostgreDB {
~ {static} String DB_URL
~ {static} String USER
~ {static} String PASS
- Connection connection
- void setConnection()
+ void createUser(String,String,String)
+ void loginUser(String,String,ActionEvent)
+ ObservableList<Animal> getAnimals()
+ ObservableList<String> getKinds()
+ void createAnimal(String,String,LocalDate,ActionEvent,Boolean)
+ void deleteAnimal(int,ActionEvent)
+ ObservableList<EventsAnimals> getEvents()
+ void createEvent(String,LocalDate,LocalDate,ActionEvent)
+ void createEventreglament(String,LocalDate,LocalDate)
+ void deleteEvent(int,ActionEvent)
+ Map<Integer,List<CalendarActivity>> getCalendarActivitiesMonth(ZonedDateTime)
- Map<Integer,List<CalendarActivity>> createCalendarMap(List<CalendarActivity>)
+ ObservableList<Pills> getPills()
+ ObservableList<String> getPrescribing()
- LocalDate calcDateEnd(LocalDate,int)
}
class com.example.cursjavafx.CalendarController {
+ Text year
+ Text month
~ PostgreDB db
~ ZonedDateTime dateFocus
~ ZonedDateTime today
+ FlowPane calendar
+ void initialize(URL,ResourceBundle)
+ void backOnMounth(ActionEvent)
+ void forwardOnMounth(ActionEvent)
- void drawCalendar()
- void createCalendarActivity(List<CalendarActivity>,double,double,StackPane)
+ void backToMain(ActionEvent)
}
class com.example.cursjavafx.LoginController {
+ TextField login
+ TextField password
~ PostgreDB db
~ String regexPassword
~ String regexLogin
# void switchToRegPage(ActionEvent)
+ void login(ActionEvent)
}


javafx.fxml.Initializable <|.. com.example.cursjavafx.AnimalController
javafx.fxml.Initializable <|.. com.example.cursjavafx.MainController
javafx.application.Application <|-- com.example.cursjavafx.HelloApplication
javafx.fxml.Initializable <|.. com.example.cursjavafx.AddAnimalController
javafx.fxml.Initializable <|.. com.example.cursjavafx.CalendarController
@enduml